---
import '@/styles/global.css'
import '@fontsource-variable/montserrat'
import { getLangFromUrl, useTranslations } from '@/i18n/utils'

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
---

<!doctype html>
<html lang={lang}>
  <head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width' />
    <link rel='icon' href='/favicon.png' type='image/png' />
    <meta name='generator' content={Astro.generator} />
    <meta name='description' content={t('home.description')} />
    <title>{t('home.title')}</title>
  </head>
  <body>
    <slot />
  </body>
</html>

<script is:inline>
  const carousels = document.querySelectorAll('#carousel')

  carousels.forEach((carousel) => {
    if (!carousel) return
    const imagesStr = carousel.dataset.images
    const title = carousel.dataset.title
    const autoPlay = carousel.dataset.autoPlay === 'true'
    const images = JSON.parse(imagesStr || '[]')

    const carouselWrapper = carousel.querySelector(`#${title}-carousel-wrapper`)
    const carouselIndicatorsContainer = document.getElementById(
      `${title}-carousel-indicators`
    )
    const carouselIndicators = document.querySelectorAll(
      `#${title}-carousel-indicators button`
    )
    const carouselPrev = document.getElementById(`${title}-carousel-prev`)
    const carouselNext = document.getElementById(`${title}-carousel-next`)

    let currentIndex = 0
    const total = images.length
    let intervalId

    updateCarouselSlide(currentIndex)
    initializeCarousel(carouselIndicatorsContainer)

    const resetInterval = () => {
      if (intervalId) clearInterval(intervalId)
      if (autoPlay) {
        intervalId = setInterval(() => {
          const newIndex = (currentIndex + 1) % total
          updateCarouselSlide(newIndex)
        }, 10000)
      }
    }

    carouselPrev?.addEventListener('click', () => {
      const newIndex = (currentIndex - 1 + total) % total
      updateCarouselSlide(newIndex)
      resetInterval()
    })

    carouselNext?.addEventListener('click', () => {
      const newIndex = (currentIndex + 1) % total
      updateCarouselSlide(newIndex)
      resetInterval()
    })

    carouselIndicators.forEach((btn, i) => {
      btn.addEventListener('click', () => {
        updateCarouselSlide(i)
        resetInterval()
      })
    })

    let touchStartX = 0
    let touchEndX = 0

    carouselWrapper?.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX
    })

    carouselWrapper?.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX
      handleGesture()
    })

    function handleGesture() {
      const diff = touchEndX - touchStartX
      if (Math.abs(diff) < 30) return
      if (diff > 0) {
        const newIndex = (currentIndex - 1 + total) % total
        updateCarouselSlide(newIndex)
      } else {
        const newIndex = (currentIndex + 1) % total
        updateCarouselSlide(newIndex)
      }
      resetInterval()
    }

    resetInterval()

    function updateCarouselSlide(index) {
      if (!carouselWrapper) return
      currentIndex = index
      const translateX = -index * 100
      carouselWrapper.style.transform = `translateX(${translateX}%)`

      carouselIndicators.forEach((btn, i) => {
        btn.classList.toggle('opacity-90', i === index)
        btn.classList.toggle('opacity-50', i !== index)
      })
    }

    function initializeCarousel(carouselIndicatorsContainer) {
      carouselPrev?.classList.remove('hidden')
      carouselNext?.classList.remove('hidden')
      carouselIndicatorsContainer?.classList.remove('hidden')
      carouselIndicatorsContainer?.classList.add('flex')
    }
  })
</script>
