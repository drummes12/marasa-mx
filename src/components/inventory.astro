---
import { getLangFromUrl, useTranslations } from '@/i18n/utils'
import Section from '@/components/section.astro'

import InventoryMobile from './inventory-mobile.astro'
import { inventoryData } from '@/consts/inventory'
import { imagesInventory } from '@/consts/images.ts'

const statusColors = {
  available: 'bg-available',
  reserved: 'bg-reserved',
  sold: 'bg-sold'
}

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
---

<div class='bg-primary-coral'>
  <Section
    id='inventory'
    class='relative flex-col py-20 pb-32 px-4 !bg-transparent'
  >
    <heading
      class='uppercase text-center h-fit flex flex-col items-center gap-2 text-white'
    >
      <h2 class='text-md sm:text-xl tracking-[1rem]'>
        {t('inventory.section')}
      </h2>
      <h1
        class='text-3xl sm:text-5xl tracking-[1rem] font-semibold leading-tight'
      >
        {t('inventory.title')}
      </h1>
    </heading>

    <div class='w-full h-[1px] my-8 bg-white'></div>

    <div class='relative w-full h-fit'>
      <div class='max-w-full text-white uppercase'>
        <div
          class='max-w-full flex flex-row flex-wrap gap-x-8 gap-y-2 items-center justify-end mb-4'
        >
          <div class='flex flex-row gap-2 items-center'>
            <div class='border-1 size-6 rounded-xs border-white bg-available'>
            </div>
            <p>{t('inventory.available')}</p>
          </div>

          <div class='flex flex-row gap-2 items-center'>
            <div class='border-1 size-6 rounded-xs border-white bg-reserved'>
            </div>
            <p>{t('inventory.reserved')}</p>
          </div>

          <div class='flex flex-row gap-2 items-center'>
            <div class='border-1 size-6 rounded-xs border-white bg-sold'></div>
            <p>{t('inventory.sold')}</p>
          </div>
        </div>
      </div>

      <div class='relative w-full h-fit'>
        <img
          src={imagesInventory.src}
          alt={imagesInventory.alt}
          class='bg-primary-coral'
        />
        <div class='absolute inset-0 w-full h-full'>
          {
            inventoryData.map(({ id, x, y, ...info }) => (
              <div
                class={`absolute w-[5%] h-auto py-0.5 md:py-1 rounded-full ${statusColors[info.status as keyof typeof statusColors]} opacity-80 md:opacity-80 md:scale-100 md:border-0 transition text-white flex justify-center items-center cursor-crosshair`}
                style={{
                  top: y,
                  left: x
                }}
                data-id={id}
                data-info={JSON.stringify(info)}
                data-lang={lang}
              >
                <small class='font-bold leading-none text-[0.5rem] sm:text-xs md:text-xl xl:text-2xl select-none'>
                  {id}
                </small>
              </div>
            ))
          }
        </div>
      </div>

      <article
        id='information'
        class='overflow-hidden hidden flex-row justify-center items-center absolute -bottom-24 left-4 rounded-lg border-1 text-primary-coral uppercase bg-white shadow-lg tracking-wider transition-all'
      >
        <div class='flex flex-col p-3'>
          <div class='flex flex-row justify-between items-start'>
            <div class='flex flex-col'>
              <h3 id='modelo' class='text-xl font-semibold leading-none'>
                {t(`inventory.coral-model`)}
              </h3>
              <small id='status' class='text-sm opacity-80 text-secondary-blue'
                >{t('inventory.available')}</small
              >
            </div>

            <p id='id' class='text-4xl font-bold leading-none'>101</p>
          </div>

          <div class='w-full h-[1px] my-2 bg-primary-coral'></div>

          <div
            class='grid grid-cols-2 grid-rows-3 gap-2 font-extralight tracking-wide text-lg [&>h4]:font-normal'
          >
            <h4>{t('inventory.bedrooms')}</h4>
            <p id='bedrooms'>3</p>

            <h4>{t('inventory.size')}</h4>
            <p id='size'>186.57 m2</p>

            <h4>{t('inventory.price')}</h4>
            <p id='price'>$2,743,195 (MXN)</p>
          </div>
        </div>

        <div class='max-h-48 aspect-video'>
          <img
            id='model-image'
            src='/images/gallery/fachada-frontal.webp'
            alt={t('inventory.image')}
            class='w-full h-full'
          />
        </div>
      </article>
    </div>

    <InventoryMobile />
  </Section>
</div>

<script>
  import { useTranslations } from '@/i18n/utils'

  const inventoryData = document.querySelectorAll('[data-info]')
  const information = document.querySelector('article#information')

  const idElement = information?.querySelector('#id')
  const statusElement = information?.querySelector('#status')
  const bedroomsElement = information?.querySelector('#bedrooms')
  const sizeElement = information?.querySelector('#size')
  const priceElement = information?.querySelector('#price')
  const modelImageElement = information?.querySelector(
    '#model-image'
  ) as HTMLImageElement

  inventoryData.forEach((data) => {
    const id = (data as HTMLElement).dataset.id ?? ''
    const { status, bedrooms, size, price, image } = JSON.parse(
      (data as HTMLElement).dataset.info || '{}'
    )
    const lang = (data as HTMLElement).dataset.lang as 'en' | 'es'
    const t = useTranslations(lang)

    data.addEventListener('mouseover', () => {
      information?.classList.replace('hidden', 'show-information')
      information?.classList.remove('available', 'reserved', 'sold')
      information?.classList.add(status)
      if (statusElement)
        statusElement.textContent = t(`inventory.${status as keyof typeof t}`)
      if (idElement) idElement.textContent = id
      if (bedroomsElement) bedroomsElement.textContent = bedrooms
      if (sizeElement) sizeElement.textContent = size
      if (priceElement) priceElement.textContent = price
      if (modelImageElement) modelImageElement.src = image

      inventoryData.forEach((data) => {
        data.classList.replace('md:opacity-100', 'md:opacity-80')
        data.classList.replace('md:scale-110', 'md:scale-100')
        data.classList.replace('md:border-2', 'md:border-0')
      })
      data.classList.replace('md:opacity-80', 'md:opacity-100')
      data.classList.replace('md:scale-100', 'md:scale-110')
      data.classList.replace('md:border-0', 'md:border-2')
    })
  })
</script>

<style>
  .show-information {
    opacity: 1;
    display: flex;
    border: 1px solid;

    &.available {
      border-color: var(--color-available);
      --tw-shadow-color: color-mix(
        in srgb,
        var(--color-available) 40%,
        transparent
      );
    }
    &.reserved {
      border-color: var(--color-reserved);
      --tw-shadow-color: color-mix(
        in srgb,
        var(--color-reserved) 40%,
        transparent
      );
    }
    &.sold {
      border-color: var(--color-sold);
      --tw-shadow-color: color-mix(in srgb, var(--color-sold) 40%, transparent);
    }

    @media (max-width: 768px) {
      display: none;
      opacity: 0;
    }
  }

  .hidden {
    opacity: 0;
    display: none;
  }
</style>
